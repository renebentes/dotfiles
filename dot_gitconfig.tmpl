# ~/.gitconfig
# =============================================================================
# User-specific Git configuration file.
#
# See https://git-scm.com/docs/git-config
#

[user]
    name = "{{ .name }}"
    email = "{{ .email }}"
    signingkey = "{{ .key }}"

[commit]
    template = ~/.gitmessage

[core]
    editor = code --wait
    autocrlf = true
[pull]
    ff = only
[push]
    default = simple
[log]
    decorate = full
    abbrevCommit = true
[format]
    pretty=format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset
[alias]
    cr = clone --recursive
    ci = commit
    co = checkout
    st = status
    br = branch
    fo = fetch origin
    dt = difftool
    stat = diff --stat
    sw = switch

    # Add files patched
    ap = add -p

    # Modify previous commit
    cia = commit --amend

    # Modify hash for previous commit
    cian = commit --amend --no-edit

    ### diff ###
    df = diff

    # diff - show changes not yet staged
    dc = diff --cached

    # diff - show changes about to be commited
    ds = diff --staged

    # Starting new work
    cb = checkout -b
    swc = switch -c

    # Show top 20 commits
    lg = log -n 20 --oneline

    # Show complete log with graph
    lga = log --all --graph

    # Get working directory up to date
    up = !git fetch --prune && git pull --rebase && git submodule update --init --recursive

    # Open this editor
    ce = config --global -e

    # Reset previous commit
    undo = reset --soft HEAD~1

    # Unstage file
    unstage= restore --staged

    # Friendly wording is easier to remember.
    # Thanks to http://gggritso.com/human-git-aliases
    aliases = "!git config --get-regexp '^alias\\.' | cut -c 7- | sed 's/ / = /'"
    branches = branch -a
    tags = tag -n1 --list
    stashes = stash list
    remotes = remote -v

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

    # Remove file from git cache
    rmc = rm --cached

    # Stash snapshot - from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    # Take a snapshot of your current working tree without removing changes.
    # This is handy for refactoring where you can't quite fit what you've done
    # into a commit but daren't stray too far from now without a backup.
    #
    # Running this:
    #
    #   $ git snapshot
    #
    # Creates this stash:
    #
    #   stash@{0}: On feature/handy-git-tricks: snapshot: Mon Apr 8 12:39:06 BST 2013
    #
    # And seemingly no changes to your working tree.
    #
    snapshot = !git stash push --include-untracked --message \"snapshot: $(date)\" && git stash apply \"stash@{0}\"
    snapshots = !git stash list --grep snapshot

    # Work In Progress - Easy tracking of what you're doing
    #
    # From https://gist.github.com/492227 and VonC on stackoverflow.
    #
    # This enables a quick way to add all new and modified files to the index,
    # while cleaning the index from the files removed from the working tree;
    # this cleaning will facilitate a rebase, because there won't be any conflict
    # due to an "unclean" working directory (not in sync with the index).

    # Add files using the message "wip"
    wip = !"git add --all; git ls-files --deleted -z | xargs -r -0 git rm; git commit --message=wip"

    # Restore the deleted files to the working tree.
    unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"

    # Publish the current branch by pushing it to the remote "origin",
    # and setting the current branch to track the upstream branch.
    ps = !"git push --set-upstream origin $(git current-branch)"

    # Push with a force and lease, which means that you're pushing in order
    # to forcefully overwrite the remote, and you want a safety check first:
    # git checks you're current with remote, and only then allows the push.
    # We name this `pushy` because its disagreeably aggressive (in general)
    # or overly assertive (in general), yet still better than just --force.
    pushy = !"git push --force-with-lease"

    sh= !"git log --pretty=format:'%h %s' --no-merges | fzf | cut -c -7 | xargs -o git show"

    ### SHELL SCRIPTING ALIASES ###
    # Get the current branch name
    current-branch = rev-parse --abbrev-ref HEAD

[credential]
    {{- if eq .chezmoi.os "linux" }}
    credentialStore = gpg
    {{-   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
    helper = /mnt/c/Program\\ Files/Git/mingw64/bin/git-credential-manager.exe
    {{-   else }}
    helper = /usr/local/bin/git-credential-manager
    {{-   end }}
    {{- end }}

[credential "https://dev.azure.com"]
    useHttpPath = true
[credential "https://gitlab.com"]
    provider = generic
[filter "lfs"]
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
[commit]
    gpgsign = true
[init]
    defaultBranch = main
[gpg]
    {{- if eq .chezmoi.os "windows" }}
    program = C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe
    {{- else if (and (eq .chezmoi.os "linux") (.chezmoi.kernel.osrelease | lower | contains "microsoft")) }}
    program = /mnt/c/Program\\ Files\\ \\(x86\\)/GnuPG/bin/gpg.exe
    {{- end }}
